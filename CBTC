#include <opencv2/opencv.hpp>

class FaceDetector {
public:
    explicit FaceDetector();
    std::vector<cv::Rect> detect_face_rectangles(const cv::Mat &frame);

private:
    cv::dnn::Net network_;
    double scale_factor_;
    cv::Size input_image_size_;
    cv::Scalar mean_values_;
    double confidence_threshold_;
};

FaceDetector::FaceDetector() {
    // Load the face detection model
    network_ = cv::dnn::readNetFromCaffe("deploy.prototxt", "res10_300x300_ssd_iter_140000.caffemodel");
    scale_factor_ = 1.0;
    input_image_size_ = cv::Size(300, 300);
    mean_values_ = cv::Scalar(104.0, 177.0, 123.0);
    confidence_threshold_ = 0.5;
}

std::vector<cv::Rect> FaceDetector::detect_face_rectangles(const cv::Mat &frame) {
    cv::Mat input_blob = cv::dnn::blobFromImage(frame, scale_factor_, input_image_size_, mean_values_, false, false);
    network_.setInput(input_blob, "data");
    cv::Mat detection = network_.forward("detection_out");
    cv::Mat detection_matrix(detection.size[2], detection.size[3], CV_32F, detection.ptr<float>());

    std::vector<cv::Rect> faces;
    for (int i = 0; i < detection_matrix.rows; i++) {
        float confidence = detection_matrix.at<float>(i, 2);
        if (confidence < confidence_threshold_) {
            continue;
        }
        int x_left_bottom = static_cast<int>(detection_matrix.at<float>(i, 3) * frame.cols);
        int y_left_bottom = static_cast<int>(detection_matrix.at<float>(i, 4) * frame.rows);
        int x_right_top = static_cast<int>(detection_matrix.at<float>(i, 5) * frame.cols);
        int y_right_top = static_cast<int>(detection_matrix.at<float>(i, 6) * frame.rows);
        faces.emplace_back(x_left_bottom, y_left_bottom, (x_right_top - x_left_bottom), (y_right_top - y_left_bottom));
    }
    return faces;
}

int main() {
    cv::VideoCapture video_capture;
    if (!video_capture.open(0)) {
        return 0;
    }

    cv::Mat frame;
    while (true) {
        video_capture >> frame;
        FaceDetector face_detector;
        std::vector<cv::Rect> faces = face_detector.detect_face_rectangles(frame);
        for (const auto &face : faces) {
            cv::rectangle(frame, face, cv::Scalar(0, 255, 0), 2);
        }
        cv::imshow("Image", frame);
        const int esc_key = 27;
        if (cv::waitKey(10) == esc_key) {
            break;
        }
    }
    cv::destroyAllWindows();
    video_capture.release();
    return 0;
}
